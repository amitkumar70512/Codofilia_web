<!DOCTYPE html>
<html>
<head>
<title>
   Assemblylogin..Arithemetic and logic instructions
</title>
<script src="https://kit.fontawesome.com/76b626d43d.js" crossorigin="anonymous"></script>
        <link rel="stylesheet" href="style.css" type="text/css">
        <link rel="stylesheet" href="style1.css" type="text/css">
        <link rel="icon" href="asmlogo.jpg" type="text/icon">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="UTF-8" /> 
    </head>
    <body>
        <nav>
            
                <div class="top">
                   <a href=""><i class ="fas fa-code"></i></a> 
                    <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/firstpage.html"><i class="fas fa-home">Home </i>  </a>
                    <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/ebook1.html"><i class="fas fa-book-open">e-books</i></a>
            
                 <a href ="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/programs.html">8086 examples</a>
            
           <!---- <div id="reg"> <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/registration.html">Register</a>
             </div> -->
             
             <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/registration.html">Sign in  <i class="fas fa-sign-in-alt"></i> </a></div>
               
            
        </nav>
        
        <div class="dropdown">
               
          <button class="dropbutton"><i class="fas fa-microchip"></i>8086  <i class="fas fa-caret-down"></i></button>
          <div class="content">
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/pin8086.html"> Artitecture and Pin diagram</a>
          
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material2.html">Registers</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material3.html">Memory accessing</a>
          
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material5.html">variables</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material6.html">Arrays</a>

          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material8.html">Interrupts</a>

          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material12.html">Procedures</a>

        </div>
        </div>
        <div class="dropdown">
          <button class="dropbutton"><i class="fas fa-microchip"></i>8051  <i class="fas fa-caret-down" ></i></button>
          <div class="content">
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material1.html">Introduction to 8051</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material2.html">Artitecture</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material3.html">Pin description</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material4.html">8051 Stack</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material5.html">Bit Addressable</a>
          
        </div>
        </div>
        
                  
                    <div class="dropdown">
                      <button class="dropbutton"><i class="fas fa-project-diagram"></i>Compilers <i class="fas fa-caret-down"></i></button>
                      <div class="content">
                      <a href="https://www.onlinegdb.com">Online GDB Compiler </a>
                      <a href="https://www.tutorialspoint.com/compile_assembly_online.php">MASM compiler</a>
                      <a href="https://www.tutorialspoint.com/compile_c_online.php"><i class="fas fa-code" style="width:25px;height:25px;"></i>C Compiler</a>
                      <a href="https://www.tutorialspoint.com/compile_java_online.php"><i class ="fab fa-java" style="width:25px;height:25px;"></i>JAVA Compiler</a>
                      
                    </div>
                    </div>
               
            
       
            <div class="material">
			<h1>Arithmetic and logic instructions</h1>
			<h3>Most Arithmetic and Logic Instructions affect the processor status register (or
<b>Flags</b>)</h3>
<img src="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/languages/alu.png"> 
<h3>As you may see there are 16 bits in this register, each bit is called a flag and
can take a value of 1 or 0.</h3>
<h3>*Carry Flag (CF) - this flag is set to 1 when there is an unsigned
overflow. For example when you add bytes 255 + 1 (result is not in
range 0...255). When there is no overflow this flag is set to 0.</h3>
<h3>*Zero Flag (ZF) - set to 1 when result is zero. For none zero result this
flag is set to 0.</h3>
<h3>*Sign Flag (SF) - set to 1 when result is negative. When result is
positive it is set to 0. Actually this flag take the value of the most
significant bit.</h3>
<h3>*Overflow Flag (OF) - set to 1 when there is a signed overflow. For
example, when you add bytes 100 + 50 (result is not in range -
128...127).</h3>
<h3>*Parity Flag (PF) - this flag is set to 1 when there is even number of one
bits in result, and to 0 when there is odd number of one bits. Even if
result is a word only 8 low bits are analyzed!</h3>
<h3>*Auxiliary Flag (AF) - set to 1 when there is an unsigned overflow for
low nibble (4 bits).</h3>
<h3>*Interrupt enable Flag (IF) - when this flag is set to 1 CPU reacts to
interrupts from external devices.</h3>
<h3>*Direction Flag (DF) - this flag is used by some instructions to process
data chains, when this flag is set to 0 - the processing is done forward,
<h3>when this flag is set to 1 the processing is done backward.</h3> 
<h3>There are 3 groups of instructions.</h3>
<h3>First group: ADD, SUB,CMP, AND, TEST, OR, XOR</h3>
<h3>These types of operands are supported:</h3>
<h3>REG, memory</h3>
<h3>memory, REG</h3>
<h3>REG, REG</h3>
<h3>memory, immediate</h3>
<h3>REG, immediate</h3>
<h3>REG: AX, BX, CX, DX, AH, AL, BL, BH, CH, CL, DH, DL, DI, SI, BP, SP.</h3>
<h3>memory: [BX], [BX+SI+7], variable, etc...</h3>
<h3>immediate: 5, -24, 3Fh, 10001101b, etc...</h3>
<h3>After operation between operands, result is always stored in first operand.</h3>
<h3>CMP and TEST instructions affect flags only and do not store a result (these
instruction are used to make decisions during program execution).</h3>
<h3>These instructions affect these flags only:</h3>
<h3>CF, ZF, SF, OF, PF, AF.</h3>
<h3>*ADD - add second operand to first.</h3>
<h3>*SUB - Subtract second operand to first.</h3>
<h3>*CMP - Subtract second operand from first for flags only.</h3>
<h3>*AND - Logical AND between all bits of two operands. These rules apply:</h3>
<h3>1 AND 1 = 1</h3>
<h3>1 AND 0 = 0</h3>
<h3>0 AND 1 = 0</h3>
<h3>0 AND 0 = 0</h3>
<h3>As you see we get 1 only when both bits are 1.</h3>
<h3>*TEST - The same as AND but for flags only.</h3>
<h3>*OR - Logical OR between all bits of two operands. These rules apply:</h3>
<h3>1 OR 1 = 1</h3>
<h3>1 OR 0 = 1</h3>
<h3>0 OR 1 = 1</h3>
<h3>0 OR 0 = 0</h3>
<h3>As you see we get 1 every time when at least one of the bits is 1.</h3>
<h3>*XOR - Logical XOR (exclusive OR) between all bits of two operands.</h3>
<h3>These rules apply:</h3>
<h3>1< XOR 1 = 0</h3>
<h3>1 XOR 0 = 1</h3>
<h3>0 XOR 1 = 1</h3>
<h3>0 XOR 0 = 0</h3>
<h3>As you see we get 1 every time when bits are different from each other.</h3>
<h3>Second group: MUL, IMUL, DIV, IDIV</h3>
<h3>These types of operands are supported:</h3>
<h3>REG</h3>
<h3>memory</h3>
<h3>REG: AX, BX, CX, DX, AH, AL, BL, BH, CH, CL, DH, DL, DI, SI, BP, SP.</h3>
<h3>memory: [BX], [BX+SI+7], variable, etc...</h3>
<h3>MUL and IMUL instructions affect these flags only:</h3>
<h3>CF, OF</h3>
<h3>When result is over operand size these flags are set to 1, when result fits in
operand size these flags are set to 0.</h3>
<h3>For DIV and IDIV flags are undefined.</h3>
<h3>*MUL - Unsigned multiply:</h3>
<h3>when operand is a byte:</h3>
<h3>AX = AL * operand.</h3>
<h3>when operand is a word:</h3>
<h3>(DX AX) = AX * operand.</h3>
<h3>*IMUL - Signed multiply:</h3>
<h3>when operand is a byte:</h3>
<h3>AX = AL * operand.</h3>
<h3>when operand is a word:</h3>
<h3>DX AX) = AX * operand.</h3>
<h3>*DIV - Unsigned divide: </h3>
<h3>when operand is a byte:</h3>
<h3>AL = AX / operand</h3>
<h3>AH = remainder (modulus). .</h3>
<h3>when operand is a word:</h3>
<h3>AX = (DX AX) / operand</h3>
<h3>DX = remainder (modulus). .</h3>
<h3>*IDIV - Signed divide:</h3>
<h3>when operand is a byte:</h3>
<h3>AL = AX / operand</h3>
<h3>AH = remainder (modulus). .</h3>
<h3>when operand is a word:</h3>
<h3>AX = (DX AX) / operand</h3>
<h3>DX = remainder (modulus). .</h3>
<h3>Third group: INC, DEC, NOT, NEG</h3>
<h3>These types of operands are supported:</h3>
<h3>REG</h3>
<h3>memory</h3>
<h3>REG: AX, BX, CX, DX, AH, AL, BL, BH, CH, CL, DH, DL, DI, SI, BP, SP.</h3>
<h3>memory: [BX], [BX+SI+7], variable, etc...</h3>
<h3>INC, DEC instructions affect these flags only:</h3>
<h3>ZF, SF, OF, PF, AF.</h3>
<h3>NOT instruction does not affect any flags!</h3>
<h3>NEG instruction affects these flags only:</h3>
<h3>CF, ZF, SF, OF, PF, AF.</h3>
<h3>*NOT - Reverse each bit of operand.</h3>
<h3>*NEG - Make operand negative (two's complement). Actually it reverses
each bit of operand and then adds 1 to it. For example 5 will become -5,
and -2 will become 2.  </h3>
                
		   <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material9.html">back<i class="fas fa-arrow-circle-left" style="width:25px; height:30px;"></i> </a>
            <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material11.html">next<i class="fas fa-arrow-circle-right	" style="width:25px; height:30px;"></i> </a>
            </div>

     
     <div class="lowpanel">
      <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/about.html">About</a>
      <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/contact.html"><i class="fas fa-map-marker-alt"></i>contact us</a>
         <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/feedback.html"><i class="fas fa-comment-dots"></i>feedback</a>
     
         
         <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/install0.html"><i class="fas fa-hands-helping"></i>Installations help</a>
        
     </div>
     
     <div class="socialmedia" >
      <a href="https://www.facebook.com/amit70512/"  ><i class="fab fa-facebook" style="font-size:48px;"> </i></a>
      <a href="https://www.instagram.com/assemblylearning/"><i class="fab fa-instagram"style="font-size:48px;"></i></a>
      <a href=""><i class="fab fa-twitter" style="font-size:48px;"></i></a>
      
    </div>
    </body>
</html>
