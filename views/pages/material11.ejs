<!DOCTYPE html>
<html>
<head>
<title>
   assemblylogin..Flow control
</title>
<script src="https://kit.fontawesome.com/76b626d43d.js" crossorigin="anonymous"></script>
        <link rel="stylesheet" href="style.css" type="text/css">
        <link rel="stylesheet" href="style1.css" type="text/css">
        <link rel="icon" href="asmlogo.jpg" type="text/icon">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="UTF-8" /> 
    </head>
    <body>
        <nav>
            
                <div class="top">
                   <a href=""><i class ="fas fa-code"></i></a> 
                    <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/firstpage.html"><i class="fas fa-home">Home </i>  </a>
                    <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/ebook1.html"><i class="fas fa-book-open">e-books</i></a>
                    
                 <a href="">Library</a>
                 <a href ="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/programs.html">8086 examples</a>
            
           <!---- <div id="reg"> <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/registration.html">Register</a>
             </div> -->
            
             <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/registration.html">Sign in  <i class="fas fa-sign-in-alt"></i> </a></div>
                
            
        </nav>
        
        <div class="dropdown">
               
          <button class="dropbutton"><i class="fas fa-microchip"></i>8086  <i class="fas fa-caret-down"></i></button>
          <div class="content">
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/pin8086.html"> Artitecture and Pin diagram</a>
          
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material2.html">Registers</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material3.html">Memory accessing</a>
          
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material5.html">variables</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material6.html">Arrays</a>

          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material8.html">Interrupts</a>

          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material12.html">Procedures</a>

        </div>
        </div>
        <div class="dropdown">
          <button class="dropbutton"><i class="fas fa-microchip"></i>8051  <i class="fas fa-caret-down" ></i></button>
          <div class="content">
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material1.html">Introduction to 8051</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material2.html">Artitecture</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material3.html">Pin description</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material4.html">8051 Stack</a>
          <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/8051material5.html">Bit Addressable</a>
          
        </div>
        </div>
        
                    <div class="dropdown">
                      <button class="dropbutton"><i class="fas fa-project-diagram"></i>Compilers <i class="fas fa-caret-down"></i></button>
                      <div class="content">
                      <a href="https://www.onlinegdb.com">Online GDB Compiler </a>
                      <a href="https://www.tutorialspoint.com/compile_assembly_online.php">MASM compiler</a>
                      <a href="https://www.tutorialspoint.com/compile_c_online.php"><i class="fas fa-code" style="width:25px;height:25px;"></i>C Compiler</a>
                      <a href="https://www.tutorialspoint.com/compile_java_online.php"><i class ="fab fa-java" style="width:25px;height:25px;"></i>JAVA Compiler</a>
                     
                    </div>
                    </div>
               
            
       
            <div class="material">
			<h1>Program flow control<i class="fas fa-fan"></i></h1>
                <h3>Controlling the program flow is a very important thing, this is where your
program can make decisions according to certain conditions.</h3>
<h2>* <b>Unconditional jumps</b></h2>
<h3>The basic instruction that transfers control to another point in the
program is JMP.</h3>
<h3>The basic syntax of JMP instruction:</h3>
<h3>JMP label</h3>
<h3>To declare a label in your program, just type its name and add ":" to the
end, label can be any character combination but it cannot start with a
number, for example here are 3 legal label definitions:</h3>
<h3>label1:</h3>
<h3>label2:</h3>
<h3>a:</h3>
<h3>Label can be declared on a separate line or before any other instruction,</h3>
<h3>for example:</h3>
<h3>x1:</h3>
<h3>MOV AX, 1</h3>
<h3>x2: MOV AX, 2</h3>
<h3>here's an example of <b>JMP</b> instruction:</h3>
<p style="border:6px; border-style:solid; border-color:#808080; padding: 1em;">
<br>org 100h
<br>mov ax, 5 ; set ax to 5.
<br>mov bx, 2 ; set bx to 2.
<br>jmp calc ; go to 'calc'.
<br>back: jmp stop ; go to 'stop'.
<br>calc:
<br>add ax, bx ; add bx to ax.
<br>jmp back ; go 'back'.
<br>stop:
<br>ret ; return to operating system</p>
<h3>Of course there is an easier way to calculate the some of two numbers,
but it's still a good example of JMP instruction.</h3>
<h3>As you can see from this example JMP is able to transfer control both
forward and backward. It can jump anywhere in current code segment
(65,535 bytes).</h3>
<h2>* Short Conditional Jumps</h2>
<h3>Unlike <b>JMP</b> instruction that does an unconditional jump, there are
instructions that do a conditional jumps (jump only when some
conditions are in act). These instructions are divided in three groups, first
group just test single flag, second compares numbers as signed, and
third compares numbers as unsigned.</h3>
<h1>Jump instructions that test single flag</h1>
<img style="margin:50px;" src="C:\Users\cw\Desktop\htmlbasic\assemblylogin\languages\save.png">
<h3>as you may already notice there are some instructions that do that same
thing, that's correct, they even are assembled into the same machine
code, so it's good to remember that when you compile JE instruction -
you will get it disassembled as: JZ, JC is assembled the same as JB
etc...</h3>
<h3>different names are used to make programs easier to understand, to
code and most importantly to remember. very offset dissembler has no
clue what the original instruction was look like that's why it uses the
most common name.</h3>
<h3>if you emulate this code you will see that all instructions are assembled
into JNB, the operational code (opcode) for this instruction is 73h this
instruction has fixed length of two bytes, the second byte is number of
bytes to add to the IP register if the condition is true. because the
instruction has only 1 byte to keep the offset it is limited to pass control
to -128 bytes back or 127 bytes forward, this value is always signed. </h3>
<h3 style="font-size:16px; color:brown;"> <li>jnc a
<li>* jnb a
<li>* jae a
<li>*
<li>* mov ax, 4
<li>* a: mov ax, 5
<li>* ret</h3>
<h1>Jump instructions for signed numbers</h1>
<img  style="margin:50px;" src="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/languages/lss.png">
<h3 style="color:blue;"><> - sign means not equal. </h3>
<h1>Jump instructions for unsigned numbers</h1>
<img   style="margin:50px;" src="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/languages/unsigned%20number.png">
<h3>Generally, when it is required to compare numeric values CMP
instruction is used (it does the same as SUB (subtract) instruction, but
does not keep the result, just affects the flags).</h3>
<h3>The logic is very simple, for example:</h3>
<h3>it's required to compare 5 and 2,</h3>
<h3>5 - 2 = 3</h3>
<h3>the result is not zero (Zero Flag is set to 0).</h3>
<h3>Another example:</h3>
<h3>it's required to compare 7 and 7,</h3>
<h3>7 - 7 = 0</h3>
<h3>the result is zero! (Zero Flag is set to 1 and JZ or JE will do the jump).</h3>
<h3>here's an example of CMP instruction and conditional jump:</h3>
<h3 style="font-size:16px; color:red;">
<li>include "emu8086.inc"
<li>*
<li>* org 100h
<li>*
<li>* mov al, 25 ; set al to 25.
<li>* mov bl, 10 ; set bl to 10.
<li>*
<li>* cmp al, bl ; compare al - bl.
<li>*
<li>* je equal ; jump if al = bl (zf = 1).
<li>*
<li>* putc 'n' ; if it gets here, then al <> bl,
<li>* jmp stop ; so print 'n', and jump to stop.
<li>*
<li>* equal: ; if gets here,
<li>* putc 'y' ; then al = bl, so print 'y'.
<li>*
<li>* stop:
<li>*
<li>* ret ; gets here no matter what. </h3>
<h3>try the above example with different numbers for <b>AL</b> and <b>BL</b>, open flags
by clicking on flags button, use single step and see what happens. you
can use <b>F5</b> hotkey to recompile and reload the program into the
emulator. </h3>

		   <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material10.html">back<i class="fas fa-arrow-circle-left" style="width:25px; height:30px;"></i> </a>
            <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/material12.html">next<i class="fas fa-arrow-circle-right	" style="width:25px; height:30px;"></i> </a>
            </div>

     
     <div class="lowpanel">
      <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/about.html">About</a>
      <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/contact.html"><i class="fas fa-map-marker-alt"></i>contact us</a>
         <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/feedback.html"><i class="fas fa-comment-dots"></i>feedback</a>
       
         
         <a href="file:///C:/Users/cw/Desktop/htmlbasic/assemblylogin/install0.html"><i class="fas fa-hands-helping"></i>Installations help</a>
        
     </div>
     
     <div class="socialmedia" >
      <a href="https://www.facebook.com/amit70512/"  ><i class="fab fa-facebook" style="font-size:48px;"> </i></a>
      <a href="https://www.instagram.com/assemblylearning/"><i class="fab fa-instagram"style="font-size:48px;"></i></a>
      <a href=""><i class="fab fa-twitter" style="font-size:48px;"></i></a>
      
    </div>
    </body>
</html>
